# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# These helper functions are used in most of the
# job scripts.  They help determine the filenames
# of the jobs so that HiTSAPipe can determine if
# everything finished properly.

# These scripts rely on specific variables being
# set.
#
# Required:
#	JOB_STATUS_DIR
#	PBS_JOBNAME
#	RETVAL
#	SUCCESS_FILE
#	FAILURE_FILE
# Optional:
#	PBS_O_ARRAYID
#	DEBUG
#	ERROR_MSG
#	NORMAL_MSG
#	DEBUG_MSG
#	TO_LOG

# RETVAL, SUCCESS_FILE, FAILURE_FILE, TO_LOG, ERROR_MSG,  
# NORMAL_MSG, DEBUG_MSG and DEBUG must be the variables
# used in the job scripts in order for everything 
# to work properly. PBS_JOBNAME and PBS_O_ARRAYID will 
# be set by qsub if running in parallel, otherwise 
# HiTSAPipe will mimic these variables if running in
# standalone.  PBS_O_ARRAYID will only be set
# if the job is an array job however.
# DEBUG is a flag passed from HiTSAPipe that determines
# whether or not to display debugging output.
# JOB_STATUS_DIR is a static variable set by
# HiTSAPipe

get_base() {
	if [ ! -z ${PBS_O_ARRAYID} ]
		then
			append="-${PBS_O_ARRAYID}"
	fi
	echo "${JOB_STATUS_DIR}/${PBS_JOBNAME}${append}"
}

get_success() {
	echo "$(get_base).success"
}

get_failure() {
	echo "$(get_base).failure"
}

exit_if_error() {
	if [ "${RETVAL}" != 0 ]
		then
			echo "${PBS_JOBNAME}: ERROR: ${ERROR_MSG}"
			if [ ${DEBUG} == "True" -a -n "${DEBUG_MSG}" ] 
				then
					echo "${PBS_JOBNAME}: DEBUG: ${DEBUG_MSG}"
			fi
			
			echo "${PBS_JOBNAME}: EXITING (status code: ${RETVAL})"
			touch ${FAILURE_FILE}
			exit ${RETVAL}
	else
		# If NORMAL_MSG isn't blank then print a message
		# Blank ERROR_MSG, NORMAL_MSG, DEBUG_MSG and RETVAL 
		# so that values don't get mixed up between calls.
		
		# Eventually check to see if quiet mode is set?
		if [ -n "${NORMAL_MSG}" ] 
			then
					echo "${PBS_JOBNAME}: ${NORMAL_MSG}"
		fi
		
		if [ ${DEBUG} == "True" -a -n "${DEBUG_MSG}" ] 
			then
					echo "${PBS_JOBNAME}: DEBUG: ${DEBUG_MSG}"
		fi
		
		NORMAL_MSG=""
		DEBUG_MSG=""
		ERROR_MSG=""
		RETVAL=""
	fi
}

exit_success() {
	# Print any status message(s) to the screen.
	# Create the success file and if TO_LOG is set,
	# then write it to the success file, then exit.

	if [ ${DEBUG} == "True" -a -n "${DEBUG_MSG}" ] 
		then
				echo "${PBS_JOBNAME}: DEBUG: ${DEBUG_MSG}"
	fi
	
	if [ -n "${NORMAL_MSG}" ] 
		then
			if [ "${NORMAL_MSG}" != "${DEBUG_MSG}" ]
				then
					echo "${PBS_JOBNAME}: SUCCESS: ${NORMAL_MSG}"
			fi
	fi
	
	NORMAL_MSG=""
	DEBUG_MSG=""
	ERROR_MSG=""
	RETVAL=""
	
	touch ${SUCCESS_FILE}
	if [ -n "${TO_LOG}" ]
		then
			echo "${TO_LOG}" > ${SUCCESS_FILE}
	fi 
	exit 0
}