########################################################################
# Configuration File for HiTSAPipe

# HiTSAPipe optionally takes a `--config=file` flag.  If there is no 
# configuration file found, the default options (which can be 
# found/modified in the `pipeline` script) are used.  If any options are 
# missing from the configuration file, the default option is used in its 
# place.  If a command line option is specified, it overrides the 
# configuration file.  HiTSAPipe uses the Python ConfigParser class 
# in order to parse the configuration file and follows the style of 
# RFC 822 (specifically section 3.1.1, "LONG HEADER FIELDS").  This RFC 
# can be viewed online 
# on [the IETF RFC 822 page](http://tools.ietf.org/html/rfc822.html "RFC 822").

# To use the default option that is embedded inside the 
# HiTSAPipe application, just place a "#" symbol at the 
# beginning of the line that you want to be ignored.
# This will tell HiTSAPipe to ignore 
# everything on that line. 

# You can also you what's called "string interpolation."
# That is, placing the value of one string (in our case, 
# preference) inside the value of another string.  In order 
# to do this, we use the form:

#	%(PreferenceNameHere)s

# This is useful when specifying directories that are  
# used more than once.  In order for string interpolation
# to work, both strings (preferences) must be in the same 
# section, however their order does not matter.  Here is 
# an example as to what this looks like:

#	[Section1]
#	Directory1 = "Some value"
#	[Section2]
#	Directory2 = /mnt/home/user
#	CorrectFullPath = %(Directory2)s/the/rest/of/the/path
#	WrongFullPath = %(Directory1)s/this/is/wrong

#The result here would be that `CorrectFullPath` would be the path:

#	/mnt/home/user/the/rest/of/the/path

# The preference `WrongFullPath`, however, will throw an error and 
# HiTSAPipe will exit.  This is because `Directory1` is not in the 
# same section as `WrongFullPath`.

# You may also nest string interpolations.  This means that
# that you can use a structure to define different preferences.
# Here is an example as to what this may look like:

#	[Directories]
#	OutDir = %(WorkDir)s/output
#	WorkDir = %(Dir1)s
#	Dir1 = /mnt/home/user1/work
#	Dir2 = %(WorkDir)/../../user2/other/
	
# The result here would be that:

#	OutDir = /mnt/home/user1/work/output
#	WorkDir = /mnt/home/user1/work
#	Dir1 = /mnt/home/user1/work
#	Dir2 = /mnt/home/user1/work/../../user2/other/
	
# Note that when `Dir2` is used in HiTSAPipe, it would expand this to:
	
#	Dir2 = /mnt/home/user2/other
	
# like we would expect when using a POSIX shell like bash.

# FINAL NOTE:  After the closing parenthesis there is a letter "s" that
# is critical to string interpolation working.
########################################################################

[qsub]

# Note: Must use at least 3 nodes if running in parallel!

Execution = Parallel
#Email = 
NotifyOnAbort = True
NotifyOnBegin = True
NotifyOnEnd = True
Queue = tiny
Nodes = 10


[Pipeline]

# WorkDir and ScriptsDir are required.  Any other preference names
# can be used for interpolating.  By using interpolation on 
# WorkDir, you can specify a number of different working directories
# and easily change which one to use by changing WorkDir.
 
WorkDir = %(MainWorkDir)s
ScriptsDir = /mnt/home/walt2178/Projects/hitsapipe/scripts
MainWorkDir = /mnt/home/walt2178/Projects/hitsapipe

# These are the variables used by the pipeline itself.
Database = /mnt/home/cblair/rdp/species/species
InputSequences = %(WorkDir)s/input/sequences.many
ReferenceStrains = %(WorkDir)s/input/RefStrains
BlastSequences = %(WorkDir)s/input/af243169.for
Suffix = .fasta
Direction = Forward
CutoffLength = 50
MaxBlasts = 50
MinSequenceLength = 300
NHits = 25
NPercent = .01
Root = Methanococcus_jannaschii
Primer3 = GACTCGGTCC
Primer5 = CCTAGTGGAGG